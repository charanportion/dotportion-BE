org: dotportion
service: dotportion-dashboard-api

custom:
  prune:
    automatic: true
    number: 2
  domains:
    dev: api-dev.dotportion.com
    prod: api.dotportion.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: false
    basePath: "dashboard"
    endpointType: "regional"
  cognito:
    userPoolArn: "arn:aws:cognito-idp:ap-south-1:074624701502:userpool/ap-south-1_25OzAmAmZ"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ssm:GetParameter"
      Resource: "arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/dotportion/${self:provider.stage}/*"

  environment:
    MONGO_URI: ${ssm:/dotportion/${self:provider.stage}/mongo_uri}
    MDataBase: ${self:provider.stage}
    BASE_URL: https://${self:custom.domains.${self:provider.stage}}

functions:
  getGlobalDashboard:
    handler: get-global-dashboard.handler
    events:
      - http:
          path: /global
          method: get
          cors:
            origins:
              - "http://localhost:3000" # For local development
              - "https://www.dotportion.com/"
              - "https://no-code-api-builder-edby86tby-sri-charans-projects.vercel.app/"
            headers: # Optional: specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            arn: ${self:custom.cognito.userPoolArn}

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-domain-manager

# This tells the packaging process to exclude the AWS SDK, which is already available in the Lambda environment.
package:
  individually: true
  exclude:
    - node_modules/aws-sdk/**
